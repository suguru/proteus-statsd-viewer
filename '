/* globals _:true,Rickshaw:true */
define(['viewer-common'], function(common) {

	var groups;

	var ui = {};

	function init(callback) {

		if (groups) {
			return callback();
		}

		common.api('servers', function(err, data) {
			if (err) {
				return callback(err);
			}

			groups = data;

			ui.container = $.tag('.container');
			ui.groupnav = $.tag('ul.nav.nav-tabs.server-groups')
			;

			_.each(groups, function(group, name) {

				ui
				.groupnav
				.tag('li', {'data-group':name})
				.tag('a',{href:'#server/'+name}).text(name).gat()
				.gat();

			});

			ui.container
			.append(ui.groupnav);

			$('#main')
			.append(ui.container)
			;

			// render ui

			callback();
		});

	}

	function show(group, type, name) {

		$('.servers').remove();

		if (group) {

			$('.server-groups li').removeClass('active');
			$('.server-groups li[data-group='+group+']').addClass('active');

			var row = $.tag('.row.servers');
			var left = $.tag('.span3.server-menu');
			var right = $.tag('.span9.server-content');
			row.append(left).append(right);

			ui.menu = left;
			ui.content = right;

			var servernav = $.tag('ul.nav.nav-list');
			left.append(servernav);

			servernav
			.tag('li.nav-header').text('by summary').gat();

			['CPU','Disk','Network'].forEach(function(metricsname) {
				var lowername = metricsname.toLowerCase();
				servernav
				.tag('li', {'data-type':'summary-' + lowername})
				.tag('a', {href:'#server/'+group+'/summary/'+lowername}).text(metricsname).gat()
				.gat()
				;
			});

			servernav
			.tag('li.nav-header').text('by metrics').gat();

			servernav
			.tag('li.nav-header').text('by servers').gat();

			groups[group].forEach(function(servername) {
				servernav
				.tag('li', {'data-type':'server-'+servername})
				.tag('a', {href:'#server/'+group+'/server/'+servername}).text(servername).gat()
				.gat();
			});
			left.tag('.well').append(servernav).gat();

			ui.container.append(row);

			if (type && name) {

				$('.server-menu li[data-type='+type+'-'+name+']').addClass('active');

				if (type === 'server') {
					showServer(group, name);
				} else if (type === 'summary') {
					showSummary(name);
				} else if (type === 'metrics') {
					showMetrics(name);
				}
			}
		}
	}

	function destroy(callback) {
		callback();
	}

	function showServer(group, server, from) {

		from = from || '-8hour';

		ui.content.empty();

		var cpuContainer = $.tag('.chart.cpu');
		var loadContainer = $.tag('.chart.load');
		var networkContainer = $.tag('.chart.network');
		var diskContainer = $.tag('.chart.disk');

		// cpu charts
		common.api('chart', {
			group: group,
			server: server,
			metrics: 'cpu.*',
			from: from
		}, function(err, series) {

			if (err) {
				common.error(err);
				return;
			}

			createStackedChart({
				series: series.cpu,
				container: cpuContainer
			});

		});
		// load average
		// network charts
		// disk charts

		ui.content.append(
			cpuContainer,
			loadContainer,
			networkContainer,
			diskContainer
		);
	}

	function showSummary(type) {
	}

	function showMetrics(type) {
	}

	function createStackedChart(opts) {

		var container = opts.container;
		// title
		container.tag('h4').text(opts.title).gat();
		// container
		var chartdiv = $.tag('.chart-container');
		container.append(chartdiv);

		var legenddiv = $.tag('.legend-container');
		container.append(legenddiv);

		var colors = opts.colors;

		var series = opts.series;
		if (colors) {
			series.forEach(function(row) {
				row.color = colors[row.name];
			});
		} else {
			var palette  = new Rickshaw.Color.Palette();
			series.forEach(function(row, i) {
				row.color = palette.color(i);
			});
		}
		var graph = new Rickshaw.Graph({
			element: chartdiv.get(0),
			renderer: 'area',
			stroke: true,
			series: series,
			padding: { top: 0.05, bottom: -0.05 }
		});
		graph.render();

		var legend = new Rickshaw.Graph.Legend({
			graph: graph,
			series: series,
			element: legenddiv.get(0)
		});
		new Rickshaw.Graph.Behavior.Series.Toggle({
			graph: graph,
			legend: legend
		});
		new Rickshaw.Graph.Behavior.Series.Highlight({
			graph: graph,
			legend: legend
		});

		var time = new Rickshaw.Fixtures.Time();
		var day = time.unit('day');
		var xAxis = new Rickshaw.Graph.Axis.Time({
			graph: graph,
			timeUnit: day
		});
		xAxis.render();

		var yAxis = new Rickshaw.Graph.Axis.Y({
			graph: graph
		});
		yAxis.render();

		return graph;
	}

	var colors = {
		cpu: {
			idle: '#00b22d',
			user: '#ff8000',
			iowait: '#d93600',
			system: '#b28500',
			irq: '#a64dff',
			softirq: '#7373ff'
		}
	};

	function zerofill(n) {
		if (n > 9) {
			return n;
		} else {
			return '0'+n;
		}
	}

	var formatter = {
		date: function(x) {
			var date = new Date(x*10000);
			return zerofill(date.getFullYear()) +
				'-' +
				zerofill(date.getMonth()+1) +
				'-' +
				zerofill(date.getDate()) +
				' ' +
				zerofill(date.getHours()) +
				':' +
				zerofill(date.getMinutes()) +
				':' +
				zerofill(date.getSeconds());
		},
		percent: function(y) {
			return (y*100).toFixed(2) + '%';
		}
	};

	return {

		init: init,
		destroy: destroy,
		show: show

	};

});
